name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  bioinformatics-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install bioinformatics dependencies
      run: |
        python -m pip install --upgrade pip
        pip install biopython pandas numpy scipy matplotlib seaborn
        pip install pytest pytest-cov
    
    - name: Run bioinformatics-specific tests
      run: |
        # Add bioinformatics-specific test commands here
        echo "Running bioinformatics tests..."
        # pytest tests/bioinformatics/
    
    - name: Check data format validation
      run: |
        # Add data format validation tests here
        echo "Validating data formats..."
        # python scripts/validate_formats.py

  documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        # Build documentation if docs directory exists
        if [ -d "docs" ]; then
          cd docs
          make html
        fi
    
    - name: Check documentation links
      run: |
        # Check for broken links in documentation
        echo "Checking documentation links..."

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks
      run: |
        # Run bandit for security vulnerabilities
        bandit -r . -f json -o bandit-report.json || true
        
        # Check for known security vulnerabilities in dependencies
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install performance testing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest-benchmark memory-profiler
    
    - name: Run performance benchmarks
      run: |
        # Run performance benchmarks if they exist
        if [ -d "tests/benchmarks" ]; then
          pytest tests/benchmarks/ --benchmark-only
        fi
    
    - name: Check memory usage
      run: |
        # Add memory profiling tests here
        echo "Checking memory usage patterns..."

  notify:
    runs-on: ubuntu-latest
    needs: [test, bioinformatics-tests, documentation, security, performance]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "One or more CI checks failed. Please review the logs."
    
    - name: Notify on success
      if: success()
      run: |
        echo "All CI checks passed successfully!" 